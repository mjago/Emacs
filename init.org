#+SETUPFILE: ~/Dropbox/OrgData/setupfile.org
#+LaTeX_CLASS_OPTIONS:[colorlinks=true,urlcolor=blue,listings-sv] 

#+TITLE:Emacs Initialisation File Setup

* My Key-mappings
*** C-k to kill whole line
   :PROPERTIES:
   :ID:       df2f072d-30d1-40e9-9905-deb39a963b1d
   :END:

#+BEGIN_SRC emacs-lisp

(setq kill-whole-line t)

#+END_SRC

*** TODO Remap C-j to my custom goto-next-line function
   :PROPERTIES:
   :ID:       3f3b1218-c9dd-4dba-a2ee-f8aafa338992
   :END:

#+BEGIN_SRC emacs-lisp

;; function here

#+END_SRC

*** Mark (select) all on S-C-SPC
   :PROPERTIES:
   :ID:       bac7b873-a758-4991-afe7-abba7aada174
   :END:

#+BEGIN_SRC emacs-lisp

(define-key global-map (kbd "S-C-SPC") 'mark-whole-buffer)

#+END_SRC

*** Map M-l to goto-line
   :PROPERTIES:
   :ID:       d90de769-45ce-4e5a-a878-88d0e76e162a
   :END:

#+BEGIN_SRC emacs-lisp

(global-unset-key "\M-l")
(global-set-key "\M-l" 'goto-line)

#+END_SRC

*** TODO Comment or uncomment region with M-k
   :PROPERTIES:
   :ID:       54fe0628-6b92-4e51-b03b-c1610506f021
   :END:

#+BEGIN_SRC emacs-lisp

(global-set-key "\M-k" 'comment-or-uncomment-region)

#+END_SRC

#+results:
: comment-or-uncomment-region

*** Remap M-j, M-l to navigation
   :PROPERTIES:
   :ID:       ffa0b60c-9281-44ff-b939-c6c00dc7b728
   :END:

#+BEGIN_SRC emacs-lisp

; (global-set-key "\M-i" 'previous-line)
(global-set-key "\M-j" 'backward-char)
; (global-set-key "\M-k" 'forward-line)
(global-set-key "\M-l" 'forward-char)

#+END_SRC
*** Map C-F1 to home.org

**** Function me-home-org opens home.org

#+BEGIN_SRC emacs-lisp
  
  (defun me-home-org()
    "Fast route to home.org"
    (interactive)
    (find-file "~/Dropbox/OrgData/home.org"))
  
#+END_SRC emacs-lisp

#+results:
: me-home-org

**** Function me-agenda-org opens agenda

#+BEGIN_SRC emacs-lisp
  
  (defun me-agenda-org()
    "Fast route to Agenda"
    (interactive)
    (me-home-org)
    (org-agenda-list))
  
#+END_SRC emacs-lisp

#+results:
: me-agenda-org

**** Key mapping for me-home-org and me-agenda-org[C-f1]

#+BEGIN_SRC emacs-lisp
  
  (global-set-key [C-f1] 'me-home-org)
  (global-set-key [S-C-f1] 'me-agenda-org)
  
#+END_SRC emacs-lisp

#+results:
: me-agenda-org

** Emacs default command modifications

#+BEGIN_SRC emacs-lisp

(put 'upcase-region 'disabled nil)

#+END_SRC


#+END_SRC emacs-lisp
** TODO Gnus
   :PROPERTIES:
   :ID:       c804e1c8-5961-43cb-a95f-b1ff6956bc1c
   :END:

#+BEGIN_SRC emacs-lisp

(setq gnus-select-method
    '(nntp "news.zen.co.uk"    ; fill in your server!  (see below)
           (nntp-port-number 119)))

#+END_SRC

** Setup IRC user info and channels
   :PROPERTIES:
   :ID:       6696e701-1de9-40f9-ae4c-4d5673b9cc2f
   :END:

#+BEGIN_SRC emacs-lisp

(setq rcirc-default-nick "rninja")
(setq rcirc-default-user-name "rninja")
(setq rcirc-startup-channels-alist
      '(("\\.freenode\\.net$" "#git" "#rspec")))

#+END_SRC

** Setup bbdb Contact Database
   :PROPERTIES:
   :ID:       8947b21f-9a13-4850-b1e6-01ac553d4c67
   :END:

#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path
             (concat dotfiles-dir  "martyn/bbdb-2.35/lisp"))
(require 'bbdb)
(bbdb-initialize)
(setq bbdb-north-american-phone-numbers-p nil
)

#+END_SRC

#+results:

***** TODO Setup yasnippet for rails
   :PROPERTIES:
   :ID:       d8f99c14-50a5-4788-b375-a31e24f1e26a
   :END:

# #+BEGIN_SRC emacs-lisp

# ;; (add-to-list 'load-path
# ;;    (concat dotfiles-dir "/martyn/yasnippets-rails"))

# ;; (add-hook 'ruby-mode-hook ; or rails-minor-mode-hook ?
# ;;           '(lambda ()
# ;;              (make-variable-buffer-local 'yas/trigger-key)
# ;;              (setq yas/trigger-key [tab])))

# ;; (require 'yasnippet)
# ;; ;;(add-to-list 'yas/extra-mode-hooks
# ;; ;;             'ruby-mode-hook)

# ;; (yas/initialize)
# ;; (setq yas/window-system-popup-function 'yas/x-popup-menu-for-template)

# ;; ;;(yas/load-directory
# ;; ;;   (concat
# ;; ;;      dotfiles-dir "/martyn/snippets/yasnippets-rails/rails-snippets/"))
# ;; ;;(make-variable-buffer-local 'yas/trigger-key)

# ;; ;; yasnippet-org-mode
# ;; (yas/load-directory
# ;;    (concat
# ;;       dotfiles-dir "/martyn/snippets/yasnippet-org-mode/"))

# #+END_SRC

#+results:

** Visual config
*** TODO Smooth Scrolling
**** web

[[http://adamspiers.org/computing/elisp/smooth-scrolling.el][link]]

**** configuration 

   :PROPERTIES:
   :ID:       42144f41-08ac-4f3d-825e-94d4a87a20c1
   :END:


# #+BEGIN_SRC emacs-lisp

# (add-to-list 'load-path
#              (concat dotfiles-dir "martyn/smooth-scrolling"))
# (require 'smooth-scrolling)
# (delete-from-list
# #+END_SRC

#+results:
: smooth-scrolling
*** Color theme initialisation
**** Add color-theme directory to load-path
    :PROPERTIES:
    :ID:       6c4fee97-7d5b-4ba1-b0bd-c93a5b0e56fe
    :END:

#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path
             (concat dotfiles-dir "martyn/color-theme-6.6.0"))
(add-to-list 'load-path
             (concat dotfiles-dir "martyn/color-theme-6.6.0/themes"))
;(add-to-list 'load-path
;             (concat dotfiles-dir "martyn/color-theme"))
;(add-to-list 'load-path
;             (concat dotfiles-dir "martyn/color-theme"))
(require 'color-theme)
(color-theme-initialize)

#+END_SRC

#+results:

***** color-theme-tangotango

****** web

[[https://github.com/juba/color-theme-tangotango][github]]

****** configuration
*** Theme Faves  
**** configuration
    :PROPERTIES:
    :ID:       d8e20a1b-6727-4b41-894a-744c5a530072
    :END:

#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path
             (concat dotfiles-dir "martyn/color-theme-tangotango"))
;(setq color-theme-load-all-themes nil)

;; select theme - first list element is for windowing system, second is for console/terminal
;; Source : http://www.emacswiki.org/emacs/ColorTheme#toc9
; (setq color-theme-choices 

#+END_SRC

#+BEGIN_SRC emacs-lisp
  
  (add-to-list 'load-path
               (concat dotfiles-dir "martyn/martyn/theme-faves"))
  (require 'theme-faves)
  (add-hook 'window-setup-hook 'theme-faves-init)
  
  (global-set-key [C-f7] 'theme-faves-audition-cycle-up)
  (global-set-key [S-C-f7] 'theme-faves-audition-cycle-down)
  (global-set-key [f7] 'theme-faves-cycle-up)
  (global-set-key [S-f7] 'theme-faves-cycle-down)
  
#+END_SRC

#+results:
| theme-faves-select |

*** Maximise frame at startup
   :PROPERTIES:
   :ID:       5ec698bf-0dcd-4b19-b923-a5f90e5a1073
   :END:

#+begin_src emacs-lisp

;;(add-to-list 'load-path
;;             (concat dotfiles-dir "martyn/maxframe"))
;;  (require 'maxframe)
;;  (add-hook 'window-setup-hook 'maximize-frame t)
;;  (maximize-frame)

(defun toggle-fullscreen ()
  (interactive)
  (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
	    		 '(2 "_NET_WM_STATE_MAXIMIZED_VERT" 0))
  (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
	    		 '(2 "_NET_WM_STATE_MAXIMIZED_HORZ" 0))
)
  (add-hook 'window-setup-hook 'toggle-fullscreen)



#+end_src

#+results:
** Programming
*** General
**** TODO Setup Mode-compile (emacs-wiki)

#+BEGIN_SRC emacs-lisp
  
  ;;mode-compile
  (autoload 'mode-compile "mode-compile"
    "Command to compile current buffer file based on the major mode" t)
;;  (global-set-key "\C-cc" 'mode-compile)
  (autoload 'mode-compile-kill "mode-compile"
    "Command to kill a compilation launched by `mode-compile'" t)
;;  (global-set-key "\C-ck" 'mode-compile-kill)
  
#+END_SRC


*** Inhibit scratch message

#+BEGIN_SRC emacs-lisp

(setq initial-scratch-message nil)

#+END_SRC

*** TODO Ruby
**** TODO (needs sorting) need to run rvm-autodetect-ruby to get ruby to work in babel :DISABLED:
   :PROPERTIES:
   :ID:       86bebb8b-e52d-43da-9f7b-a49ef5db14ba
   :END:

# #+BEGIN_SRC emacs-lisp

# (rvm-activate-corresponding-ruby)
# (rvm-autodetect-ruby)
# (rvm-use "1.9.1" "default")

# #+END_SRC
**** Setup rspec-mode (development)
   :PROPERTIES:
   :ID:       ace283a7-2eb8-4c48-b667-8ebfb419606d
   :END:

#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path (concat dotfiles-dir "martyn/rspec-mode"))

#+END_SRC

#+results:
| /home/martyn/.emacs.d/martyn/rspec-mode | /home/martyn/.emacs.d/martyn/highlight-parentheses | /home/martyn/.emacs.d/martyn/lusty-emacs | /home/martyn/.emacs.d/martyn/hideshow-org | /home/martyn/.emacs.d/martyn/yasnippet-0.6.1c | ~/.emacs.d/martyn/auto-complete/installation | ~/org/org-mode | ~/org/org-mode/contrib/lisp | /home/martyn/.emacs.d/martyn/martyn | /home/martyn/.emacs.d/martyn/martyn/unity-mode | /home/martyn/.emacs.d//martyn/ert/lisp/emacs-lisp | ~/martyn/rspec-mode | /home/martyn/.emacs.d/martyn/color-theme-6.6.0/themes | /home/martyn/.emacs.d/martyn/color-theme-6.6.0 | /home/martyn/.emacs.d/martyn/bbdb-2.35/lisp | /home/martyn/.emacs.d/martyn | /home/martyn/.emacs.d/elpa/find-file-in-project-2.0 | /home/martyn/.emacs.d/elpa/gist-0.5 | /home/martyn/.emacs.d/elpa/idle-highlight-1.0 | /home/martyn/.emacs.d/elpa/inf-ruby-2.1 | /home/martyn/.emacs.d/elpa/magit-0.8.1 | /home/martyn/.emacs.d/elpa/project-local-variables-0.2 | /home/martyn/.emacs.d/elpa/ruby-mode-1.1 | /home/martyn/.emacs.d/elpa/yaml-mode-0.0.5 | /home/martyn/.emacs.d//elpa-to-submit | /home/martyn/.emacs.d/ | /usr/share/emacs23/site-lisp/ruby1.9.1-elisp | /usr/share/emacs23/site-lisp/ess/ | /usr/share/emacs23/site-lisp/ess | /usr/local/share/emacs/site-lisp/auctex | /usr/share/emacs23/site-lisp/dictionaries-common | /usr/share/emacs23/site-lisp/auctex | /usr/share/emacs/site-lisp/auctex | /etc/emacs23 | /etc/emacs | /usr/local/share/emacs/23.2/site-lisp | /usr/local/share/emacs/site-lisp | /usr/share/emacs/23.2/site-lisp | /usr/share/emacs/23.2/site-lisp/dictionaries-common | /usr/share/emacs/23.2/site-lisp/ess | /usr/share/emacs/23.2/site-lisp/ruby1.9.1-elisp | /usr/share/emacs/site-lisp | /usr/share/emacs/23.2/leim | /usr/share/emacs/23.2/lisp | /usr/share/emacs/23.2/lisp/url | /usr/share/emacs/23.2/lisp/textmodes | /usr/share/emacs/23.2/lisp/progmodes | /usr/share/emacs/23.2/lisp/play | /usr/share/emacs/23.2/lisp/org | /usr/share/emacs/23.2/lisp/nxml | /usr/share/emacs/23.2/lisp/net | /usr/share/emacs/23.2/lisp/mh-e | /usr/share/emacs/23.2/lisp/mail | /usr/share/emacs/23.2/lisp/language | /usr/share/emacs/23.2/lisp/international | /usr/share/emacs/23.2/lisp/gnus | /usr/share/emacs/23.2/lisp/eshell | /usr/share/emacs/23.2/lisp/erc | /usr/share/emacs/23.2/lisp/emulation | /usr/share/emacs/23.2/lisp/emacs-lisp | /usr/share/emacs/23.2/lisp/cedet | /usr/share/emacs/23.2/lisp/calendar | /usr/share/emacs/23.2/lisp/calc | /usr/share/emacs/23.2/lisp/obsolete | /usr/share/emacs/23.2/leim |

*** Emacs-lisp
**** TODO Remove Paredit from elisp hook (turned on by emacs starter kit) (turned back on at mo!)

#+BEGIN_SRC emacs-lisp

;;(remove-hook 'emacs-lisp-mode-hook 'turn-on-paredit nil)

#+END_SRC

#+results:
| run-coding-hook | esk-remove-elc-on-save | turn-on-eldoc-mode |
**** Configure ERT (for unit-testing)

#+BEGIN_SRC emacs-lisp

 (add-to-list 'load-path
    (concat dotfiles-dir "/martyn/ert/lisp/emacs-lisp"))

(require 'ert)

#+END_SRC

***** To compile the manual

Needed to change in ert.texi 

@setfilename ../ert/ert.info
@setfilename ../../info/ert.info

...and needed to change makeinfo parameters to suit dir structure...

Run following with C-c, C-c

# #+BEGIN_SRC sh
#
#   cd ~/.emacs.d/martyn/ert/doc/misc/
#   makeinfo ert.texi
#
# #+END_SRC
#
# #+results:

***** TODO To read the manual

C-u M-x info ert.info
*** C

*** Configure unity-mode
**** load path and keys

#+BEGIN_SRC emacs-lisp

(add-to-list 
 'load-path
  (concat dotfiles-dir "martyn/martyn/unity-mode"))
(require 'unity-mode)
;(add-hook 'c-mode-hook 'unity-mode)
(global-set-key [f5] 'unity-cycle-test-src-header-buffer)
(global-set-key [C-f5] 'unity-cycle-MCH-buffer)
(global-set-key [f6] 'unity-cycle-alpha-ascending)
(global-set-key [S-f6] 'unity-cycle-alpha-descending)

#+END_SRC

**** unity-project ()

#+BEGIN_SRC emacs-lisp
  
  (defun unity-project ()
    (interactive)
    (find-file "~/.emacs.d/martyn/martyn/unity-mode/unity-parse-project-file.el")
    (find-file "~/.emacs.d/martyn/martyn/unity-mode/unity-auto-config.el")
    (delete-other-windows)
    (split-window-horizontally)
    (windmove-right)
    (find-file "~/.emacs.d/martyn/martyn/unity-mode/unity-mode.el")
    (windmove-left)
    (find-file "~/.emacs.d/martyn/martyn/unity-mode/unity-tests.el")
    (split-window-vertically)
    (switch-to-buffer "*ert*")
    (windmove-down)
    (switch-to-buffer "unity-tests.el"))
 
#+END_SRC

#+results:
: unity-project

**** unity-eval-src-and-tests ()

#+BEGIN_SRC emacs-lisp
  
  (defun unity-eval-src-and-tests ()
    (interactive)
    (let ((original-buffer buffer-file-name)
          (original-window (selected-window)))
  
      (if(string-match "^unity-" (file-name-nondirectory original-buffer)) 
          (progn
            (eval-buffer "unity-tests.el")
            (eval-buffer "unity-mode.el")
            (ert t)))
      (select-window original-window))) 
  ;; (error "%s" (windmove-find-other-window 'right))
  ;;     (if(equal original-buffer (windmove-find-other-window 'right))
  ;;         (windmove-right)
  ;;       (windmove-down))))
  
#+END_SRC

**** TODO Continuous testing hook
Moved to unity-mode.el
#+BEGIN_SRC emacs-lisp

  ; Add hook for continuous testing
  ; (add-hook 'after-save-hook 'unity-eval-src-and-tests) 
  ; to remove do...
  ;(remove-hook 'after-save-hook 'unity-eval-src-and-tests)

#+END_SRC

**** TODO unity-project-org()
Moved to unity-mode.el

#+BEGIN_SRC emacs-lisp
  
  (global-set-key [f4] 'unity-eval-src-and-tests)
  (global-set-key [C-f4] 'unity-switch-src-control-file)
  (global-set-key [C-c C-v] 'eval-region)
  
#+END_SRC

#+results:
: eval-region

*** TODO graphviz-dot-mode

**** web
[[http://users.skynet.be/ppareit/projects/graphviz-dot-mode/graphviz-dot-mode.html][link]]
**** dot mode
   SCHEDULED: <2010-11-29 Mon>

#+BEGIN_SRC emacs-lisp

 (load-file  (concat dotfiles-dir  "martyn/graphviz-dot-mode/graphviz-dot-mode.el"))

#+END_SRC

#+results:
: t

** My stuff
   CLOSED: [2011-01-18 Tue 19:16]
*** Require my custom files and functions
    CLOSED: [2010-11-26 Fri 06:57]
**** Add custom files directory to load-path
    :PROPERTIES:
    :ID:       863eebdf-52b6-4e3d-ab28-b4f783d2a65d
    :END:

#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path
             (concat dotfiles-dir  "martyn/martyn"))

#+END_SRC

**** my-load-init-files function

#+BEGIN_SRC emacs-lisp

(require 'my-load-init-files)

#+END_SRC

**** my-load-drill-files function

#+BEGIN_SRC emacs-lisp

(require 'my-load-drill-files)

#+END_SRC

**** my-load-org-files function

#+BEGIN_SRC emacs-lisp

(require 'my-load-org-files)

#+END_SRC

* Personal Emacs Configurations (outside of Emacs Starter Kit)
  CLOSED: [2011-01-25 Tue 14:49]
** Emacs Customisation destination files

These are already defined in Starter Kit but are re-adjusted here to keep
under my revision control...

*** loaddefs

#+BEGIN_SRC emacs-lisp

(setq autoload-file (concat dotfiles-dir "martyn/loaddefs.el"))

#+end_src

*** TODO elpa ?

;;#+BEGIN_SRC emacs-lisp
;;(setq package-user-dir (concat dotfiles-dir "martyn/elpa"))
;;#+end_src

*** custom

Customisations made using emacs Customizations go here...

#+BEGIN_SRC emacs-lisp

(setq custom-file (concat dotfiles-dir "martyn/custom.el"))

#+end_src

** Org Mode
*** Add org-mode contrib/lisp files to load path
   :PROPERTIES:
   :ID:       45537f41-3389-45b8-9454-bc0e2e51ebe5
   :END:

#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "~/org/org-mode/contrib/lisp")

#+end_src

*** org-drill related initialisation
   :PROPERTIES:
   :ID:       eb6dd9b1-86bd-4fb4-acb3-992ef90e29da
   :END:

#+BEGIN_SRC emacs-lisp

(require 'org-drill)
(setq org-learn-always-reschedule t)
(setq org-drill-use-visible-cloze-face-p t)
(setq org-drill-add-random-noise-to-intervals-p t)
(put 'scroll-left 'disabled nil)

#+END_SRC

*** Configure org-mobile
    :PROPERTIES:
    :ID:       d00980d4-443c-4cad-8bb2-3d4520e6c92d
    :END:

**** Org Agenda Files

#+BEGIN_SRC emacs-lisp

 (setq org-agenda-files (quote (
    "~/Dropbox/OrgData/home.org"
    "~/Dropbox/OrgData/unity-mode.org"
    "~/Dropbox/OrgData/personal_audit.org"
    "~/Dropbox/OrgData/capture.org"
    "~/Dropbox/OrgData/inbox.org"
 )))

 (setq org-directory "~/Dropbox/OrgData")
 (setq org-mobile-directory "~/Dropbox/MobileOrg")
 (setq org-mobile-inbox-for-pull "~/Dropbox/OrgData/inbox.org")

#+END_SRC

#+results:
: ~/Dropbox/OrgData/inbox.org


**** TODO Org Agenda Custom Commands

#+BEGIN_SRC emacs-lisp

(defun run-todo-unscheduled ()
"agenda of unscheduled todos"
(interactive)
(setq org-agenda-todo-ignore-scheduled t)
(org-todo-list '("t"))
(setq org-agenda-todo-ignore-scheduled nil))

(provide 'run-todo-unscheduled)

 (setq org-agenda-custom-commands
           '(("e" todo "-SCHEDULED")
             ("W" todo-tree "WAITING")
             ("u" tags "+boss-urgent")
             ("v" tags-todo "+boss-urgent")
             ("U" tags-tree "+boss-urgent")
             ("f" occur-tree "\\<FIXME\\>")
             ("hl" tags "+home+Lisa")
             ("hp" tags "+home+Peter")
             ("hk" tags "+home+Kim")))

#+END_SRC

#+results:
| e  | todo       | -SCHEDULED   |
| W  | todo-tree  | WAITING      |
| u  | tags       | +boss-urgent |
| v  | tags-todo  | +boss-urgent |
| U  | tags-tree  | +boss-urgent |
| f  | occur-tree | \<FIXME\>    |
| hl | tags       | +home+Lisa   |
| hp | tags       | +home+Peter  |
| hk | tags       | +home+Kim    |

#+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands
      (quote (("w" "Tasks waiting on something" tags "WAITING/!"
               ((org-use-tag-inheritance nil)
                (org-agenda-todo-ignore-scheduled nil)
                (org-agenda-todo-ignore-deadlines nil)
                (org-agenda-todo-ignore-with-date nil)
                (org-agenda-overriding-header "Waiting Tasks")))
              ("r" "Refile New Notes and Tasks" tags "LEVEL=1+REFILE"
               ((org-agenda-todo-ignore-with-date nil)
                (org-agenda-todo-ignore-deadlines nil)
                (org-agenda-todo-ignore-scheduled nil)
                (org-agenda-overriding-header "Tasks to Refile")))
              ("N" "Notes" tags "NOTE"
               ((org-agenda-overriding-header "Notes")))
              ("n" "Next" tags-todo "-WAITING-CANCELLED/!NEXT"
               ((org-agenda-overriding-header "Next Tasks")))
              ("p" "Projects" tags-todo "LEVEL=2-REFILE|LEVEL=1+REFILE/!-DONE-CANCELLED"
               ((org-agenda-skip-function 'bh/skip-non-projects)
                (org-agenda-overriding-header "Projects")))
              ("o" "Other (Non-Project) tasks" tags-todo "LEVEL=2-REFILE|LEVEL=1+REFILE/!-DONE-CANCELLED"
               ((org-agenda-skip-function 'bh/skip-projects)
                (org-agenda-overriding-header "Other Non-Project Tasks")))
              ("A" "Tasks to be Archived" tags "LEVEL=2-REFILE/DONE|CANCELLED"
               ((org-agenda-overriding-header "Tasks to Archive")))
              ("h" "Habits" tags "STYLE=\"habit\""
               ((org-agenda-todo-ignore-with-date nil)
                (org-agenda-todo-ignore-scheduled nil)
                (org-agenda-todo-ignore-deadlines nil)
                (org-agenda-overriding-header "Habits")))
              ("#" "Stuck Projects" tags-todo "LEVEL=2-REFILE|LEVEL=1+REFILE/!-DONE-CANCELLED"
               ((org-agenda-skip-function 'bh/skip-non-stuck-projects)
                (org-agenda-overriding-header "Stuck Projects")))
              ("c" "Select default clocking task" tags "LEVEL=2-REFILE"
               ((org-agenda-skip-function
                 '(org-agenda-skip-subtree-if 'notregexp "^\\*\\* Organization"))
                (org-agenda-overriding-header "Set default clocking task with C-u C-u I"))))))

#+END_SRC

#+results:
| w | Tasks waiting on something   | tags      | WAITING/!                | ((org-use-tag-inheritance nil) (org-agenda-todo-ignore-scheduled nil) (org-agenda-todo-ignore-deadlines nil) (org-agenda-todo-ignore-with-date nil) (org-agenda-overriding-header Waiting Tasks)) |                                                                                                               |
| r | Refile New Notes and Tasks   | tags      | LEVEL=1+REFILE           | ((org-agenda-todo-ignore-with-date nil) (org-agenda-todo-ignore-deadlines nil) (org-agenda-todo-ignore-scheduled nil) (org-agenda-overriding-header Tasks to Refile))                             |                                                                                                               |
| N | Notes                        | tags      | NOTE                     | ((org-agenda-overriding-header Notes))                                                                                                                                                            |                                                                                                               |
| n | Next                         | tags-todo | -WAITING-CANCELLED/!NEXT | ((org-agenda-overriding-header Next Tasks))                                                                                                                                                       |                                                                                                               |
| p | Projects                     | tags-todo | LEVEL=2-REFILE           | LEVEL=1+REFILE/!-DONE-CANCELLED                                                                                                                                                                   | ((org-agenda-skip-function (quote bh/skip-non-projects)) (org-agenda-overriding-header Projects))             |
| o | Other (Non-Project) tasks    | tags-todo | LEVEL=2-REFILE           | LEVEL=1+REFILE/!-DONE-CANCELLED                                                                                                                                                                   | ((org-agenda-skip-function (quote bh/skip-projects)) (org-agenda-overriding-header Other Non-Project Tasks))  |
| A | Tasks to be Archived         | tags      | LEVEL=2-REFILE/DONE      | CANCELLED                                                                                                                                                                                         | ((org-agenda-overriding-header Tasks to Archive))                                                             |
| h | Habits                       | tags      | STYLE="habit"            | ((org-agenda-todo-ignore-with-date nil) (org-agenda-todo-ignore-scheduled nil) (org-agenda-todo-ignore-deadlines nil) (org-agenda-overriding-header Habits))                                      |                                                                                                               |
| # | Stuck Projects               | tags-todo | LEVEL=2-REFILE           | LEVEL=1+REFILE/!-DONE-CANCELLED                                                                                                                                                                   | ((org-agenda-skip-function (quote bh/skip-non-stuck-projects)) (org-agenda-overriding-header Stuck Projects)) |
| c | Select default clocking task | tags      | LEVEL=2-REFILE           | ((org-agenda-skip-function (quote (org-agenda-skip-subtree-if (quote notregexp) ^\*\* Organization))) (org-agenda-overriding-header Set default clocking task with C-u C-u I))                    |                                                                                                               |

**** TODO my-run-drills function (doesn't work yet)

#+BEGIN_SRC emacs-lisp

 (defun my-run-drills ()
 "Function to run all drills that exist in agenda files"
  (interactive)
  (org-drill 'agenda))

 (provide 'my-run-drills)

#+END_SRC

#+results:
: my-run-drills

*** Setup org-mode (development)
   :PROPERTIES:
   :ID:       475aca1e-5f54-42e6-bb58-4b8fb56dff0f
   :END:

#+BEGIN_SRC emacs-lisp

(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(global-font-lock-mode 1)                     ; for all buffers
(setq load-path (cons "~/org/org-mode" load-path))

#+END_SRC

*** Configure Babel languages 
**** Configure Babel
Configured for...
 - Ruby 
 - C 
 - emacs-lisp
 - shell
 - graphviz
 - clojure

   :PROPERTIES:
   :ID:       9983a066-2f94-4446-82e5-bea078211562
   :END:

#+BEGIN_SRC emacs-lisp

(org-babel-do-load-languages
 'org-babel-load-languages
 '((ruby . t)
   (C . t)
   (emacs-lisp . t)
   (sh t)
   (dot t)
   (clojure t)
   ))

#+END_SRC

#+results:
| (ruby . t) | (C . t) | (emacs-lisp . t) | (sh t) | (dot t) | (clojure t) |

*** Make windmove work in org-mode
   :PROPERTIES:
   :ID:       77b9e2f6-674d-406c-a1f2-3f8e1307a541
   :END:

#+BEGIN_SRC emacs-lisp

(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)

#+END_SRC

*** Setup org-capture
    :PROPERTIES:
    :ID:       3f712c43-2db3-4001-93df-ffed1319e19a
    :END:

**** Setup capture location and key

#+BEGIN_SRC emacs-lisp

(setq org-default-notes-file "~/Dropbox/OrgData/capture.org")
(define-key global-map "\C-cc" 'org-capture)

#+END_SRC

**** TODO Setup capture templates

**** TODO Setup refile targets

#+BEGIN_SRC emacs-lisp

; Use IDO for target completion
(setq org-completion-use-ido t)

; Targets include this file and any file contributing to the agenda - up to 5 levels deep
(setq org-refile-targets (quote ((org-agenda-files :maxlevel . 5) (nil :maxlevel . 5))))

; Targets start with the file name - allows creating level 1 tasks
;; TESTING (setq org-refile-use-outline-path (quote file))

; Targets complete in steps so we start with filename, TAB shows the next level of targets etc
(setq org-outline-path-complete-in-steps t)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))

; Use IDO only for buffers
; set ido-mode to buffer and ido-everywhere to t via the customize interface
; '(ido-mode (quote both) nil (ido))
; '(ido-everywhere t)


#+END_SRC

#+results:
: confirm
*** Display images in org mode

#+BEGIN_SRC emacs-lisp

  ;; display images
  (local-set-key "\M-I" 'org-toggle-iimage-in-org)

;; -- Display images in org mode
;; enable image mode first
(iimage-mode)
;; add the org file link format to the iimage mode regex
(add-to-list 'iimage-mode-image-regex-alist
  (cons (concat "\\[\\[file:\\(~?" iimage-mode-image-filename-regex "\\)\\]")  1))
;;  add a hook so we can display images on load
(add-hook 'org-mode-hook '(lambda () (org-turn-on-iimage-in-org)))
;; function to setup images for display on load
(defun org-turn-on-iimage-in-org ()
  "display images in your org file"
  (interactive)
  (turn-on-iimage-mode)
  (set-face-underline-p 'org-link nil))
;; function to toggle images in a org bugger
(defun org-toggle-iimage-in-org ()
  "display images in your org file"
  (interactive)
  (if (face-underline-p 'org-link)
      (set-face-underline-p 'org-link nil)
      (set-face-underline-p 'org-link t))
  (call-interactively 'iimage-mode))

#+END_SRC

#+results:
: org-toggle-iimage-in-org

*** TODO Fix tab in org mode
    
#+BEGIN_SRC emacs-lisp

   ;; fix tab
   (local-set-key "\C-y" 'yank)
   ;; yasnippet (allow yasnippet to do it's thing in org files)
;;   (make-variable-buffer-local 'yas/trigger-key)
;;   (setq yas/trigger-key [tab])
;;   (define-key yas/keymap [tab] 'yas/next-field-group)))

#+END_SRC

#+results:
: yank
*** TODO Develop group agenda to show unscheduled TODO items

[[http://osdir.com/ml/emacs-orgmode-gnu/2010-03/msg00736.html][Suggestions]]
*** TODO Setup for latex / pdf export of org-mode

  1) NOTE: remember ubuntu requires texlive-latex-extra for this
  2) NOTE: also required ttf-marvosym
  3) For missing packages try searching [[http://packages.ubuntu.com/search?keywords%3Dmarvosym&searchon%3Dnames&suite%3Dmaverick&section%3Dall][here]] and apt-get install package
  4) Useful latex [[http://had.fmf.uni-lj.si/~horvat/publishing/latex/general/latex2pdf.pdf][prettifying link]]

#+BEGIN_SRC emacs-lisp

;; remember ubuntu requires texlive-latex-extra for this

(require 'org-latex)
(setq org-export-latex-listings t)
(add-to-list 'org-export-latex-packages-alist '("" "listings"))
(add-to-list 'org-export-latex-packages-alist '("" "color"))

#+END_SRC

#+results:
: org-latex
*** TODO Setup for Auctex (ongoing)

   ;;  Setup gleaned from [[http://salomie.ro/tudor/2010/09/02/console-based-system/][here]]
   ;;  #+BEGIN_SRC emacs-lisp
   ;;  
   ;;  ;; AUCTeX
   ;;  (setq TeX-auto-save t)
   ;;  (setq TeX-parse-self t)
   ;;  ;set up AUCTeX to deal with multiple file documents.
   ;;  (setq-default TeX-master nil)
   ;;  ;turn on pdf-mode.  AUCTeX will call pdflatex to compile instead of latex.
   ;;  (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
   ;;  ;turn on flyspell mode - this will automatically spell check the document in LaTex-mode
   ;;  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
   ;;  
   ;;      ; allow for export=>beamer by placing
   ;;      ;; #+LaTeX_CLASS: beamer in org files
   ;;      (unless (boundp 'org-export-latex-classes)
   ;;      (setq org-export-latex-classes nil))
   ;;      (add-to-list 'org-export-latex-classes
   ;;      ;; beamer class, for presentations
   ;;      '("beamer"
   ;;        "\\documentclass[11pt]{beamer}\n
   ;;        \\mode<{{{beamermode}}}>\n
   ;;        \\usetheme{{{{beamertheme}}}}\n
   ;;        \\usecolortheme{{{{beamercolortheme}}}}\n
   ;;        \\beamertemplateballitem\n
   ;;        \\setbeameroption{show notes}
   ;;        \\usepackage[utf8]{inputenc}\n
   ;;        \\usepackage[T1]{fontenc}\n
   ;;        \\usepackage{hyperref}\n
   ;;        \\usepackage{color}
   ;;        \\usepackage{listings}
   ;;        \\lstset{numbers=none,language=[ISO]C++,tabsize=4,
   ;;        frame=single,
   ;;        basicstyle=\\small,
   ;;        showspaces=false,showstringspaces=false,
   ;;        showtabs=false,
   ;;        keywordstyle=\\color{blue}\\bfseries,
   ;;        commentstyle=\\color{red},
   ;;        }\n
   ;;        \\usepackage{verbatim}\n
   ;;        \\institute{{{{beamerinstitute}}}}\n
   ;;        \\subject{{{{beamersubject}}}}\n"
   ;;        org-beamer-sectioning
   ;;        ("\\section{%s}" . "\\section*{%s}")
   ;;        ("\\begin{frame}[fragile]\\frametitle{%s}"
   ;;        "\\end{frame}"
   ;;        "\\begin{frame}[fragile]\\frametitle{%s}"
   ;;        "\\end{frame}")
   ;;      ))
   ;;  
   ;;      ;; Set up skeletons (see below) in a menu in ORG MODE mode
   ;;      (defvar org-org-menu)
   ;;      (add-hook 'org-mode-hook
   ;;      (lambda () (easy-menu-add-item org-org-menu nil ["Skeletons" nil t])
   ;;      (easy-menu-add-item org-org-menu '("Skeletons") ["Beamer Theme" orgmode-beamer-my-skeleton t])))
   ;;      (define-skeleton orgmode-beamer-my-skeleton
   ;;        "inserts a simple orgmode-beamer template skeleton - use C-c C-e d to build the pdf"
   ;;        nil
   ;;        "#+LaTeX_CLASS: beamer\n"
   ;;        "#+MACRO: BEAMERMODE presentation\n"
   ;;        "#+MACRO: BEAMERCOLORTHEME dove\n"
   ;;        "#+MACRO: BEAMERSUBJECT RMRF\n"
   ;;        "#+BEAMER_FRAME_LEVEL: 2\n"
   ;;        "#+COLUMNS: %35ITEM %10BEAMER_env(Env) %10BEAMER_envargs(Env Args) %4BEAMER_col(Col) %8BEAMER_extra(Extra)\n"
   ;;        "#+OPTIONS: tags:nil\n"
   ;;        "#+MACRO: BEAMERINSTITUTE My Affiliation\n"
   ;;        "#+AUTHOR: Tudor-Ioan Salomie\n"
   ;;        "\n"
   ;;        "#+TITLE: Presentation title\n"
   ;;        "\n"
   ;;        "\n"
   ;;        "* My Section\n"
   ;;        "\n"
   ;;        "** Frame 1 \\\\ with a subtitle\n"
   ;;        "\n"
   ;;        "*** Idea\n"
   ;;        "\n"
   ;;        "#+begin_LaTeX\n"
   ;;        "\n"
   ;;        "#+end_LaTeX\n"
   ;;        "\n\n\n"
   ;;      )
   ;;  
   ;;  
   ;;  #+END_SRC
   ;;  
   ;;  #+results:
   ;;  : orgmode-beamer-my-skeleton
   ;;  
** TODO Flyspell mode error avoidance
*** web discussion

[[http://stackoverflow.com/questions/1781762/enabling-flyspell-mode-gives-an-error][stackoverflow]]
[[https://bugs.launchpad.net/ubuntu/%2Bsource/dictionaries-common/%2Bbug/619015][launchpad]]

*** configuration

# #+BEGIN_SRC emacs-lisp

;;# sudo rm /usr/share/emacs/site-lisp/dictionaries-common/debian-ispell.el
;;# sudo rm /usr/share/emacs/site-lisp/dictionaries-common/flyspell.el
;;# sudo rm /usr/share/emacs/site-lisp/dictionaries-common/ispell.el
;;# cd /usr/share/emacs23/site-lisp/dictionaries-common
;;# sudo rm *.el *.elc
;; the above didn't work for me so...

;;(unload-feature 'flyspell-mode)
;;neither did this! (not loaded)

# #+END_SRC

#+results:

# #+results:

** Auto-Complete
*** To update (git)

# #+BEGIN_SRC sh

# cd /home/martyn/auto-complete/
# git pull origin master

# #+END_SRC

*** To load

M-x load-file RET 
file to load: ~/.emacs.d/martyn/auto-complete/etc/install.el
destination: ~/.emacs.d/martyn/auto-complete/installation

*** Add to init

#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "~/.emacs.d/martyn/auto-complete/installation")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/martyn/auto-complete/installation/ac-dict")
(ac-config-default)

#+END_SRC

*** Screencast 

[[http://www.youtube.com/watch?v%3DrGVVnDxwJYE][YouTube]]

** TODO Yasnippets
Need to check...
 -  org-mode hook 
 - auto-complete compatibility 

*** TODO Setup yasnippets (full install as opposed to bundle in starter kit elpa)
 :PROPERTIES:
 :ID:       6d14775e-03bd-4138-b772-ada3de677830
 :END:
**** Snippet locations (config below)
***** My custom snippets
 - ~/.emacs.d/martyn/martyn/snippets

***** My org-mode-snippets clone repo
TODO: Needs to be kept up-to date
 - ~/.emacs.d/martyn/martyn/snippets

***** My Unity-mode snippets
 - ~/.emacs.d/martyn/martyn/unity-mode/snippets
***** Standard non bundled yasnippet snippets
 - ~/.emacs.d/martyn/yasnippets-rails/rails-snippets
***** Standard non bundled yasnippet snippets
 - ~/.emacs.d/martyn/yasnippet-read-only
**** Yasnippet load and snippet locations config

#+BEGIN_SRC emacs-lisp
  
  (add-to-list 'load-path
               (concat dotfiles-dir  "martyn/yasnippet-read-only"))
  (require 'yasnippet) ;; not yasnippet-bundle
  (yas/initialize)
  
  (setq yas/root-directory 
        '("~/.emacs.d/martyn/martyn/unity-mode/snippets"
          "~/.emacs.d/martyn/martyn/snippets"
          "~/.emacs.d/martyn/martyn/snippets/yasnippet-org-mode-fork/snippets"
          "~/.emacs.d/martyn/yasnippets-rails/rails-snippets"
          "~/.emacs.d/martyn/yasnippet-read-only/snippets"))
  
  ;; Load the snippets (NOTE: the mapc required for multiple directories)
  ;; (Map `yas/load-directory' to every element)
  
  (mapc 'yas/load-directory yas/root-directory)
  
#+END_SRC

#+results:
| ~/.emacs.d/martyn/martyn/unity-mode/snippets | ~/.emacs.d/martyn/martyn/snippets | ~/.emacs.d/martyn/martyn/snippets/yasnippet-org-mode-fork | ~/.emacs.d/martyn/yasnippets-rails/rails-snippets | ~/.emacs.d/martyn/yasnippet-read-only/snippets |

*** To byte-compile-files

# #+BEGIN_SRC emacs-lisp

# (byte-compile-file
# "/home/martyn/.emacs.d/martyn/yasnippet-0.6.1c/yasnippet.el" t)
# (byte-compile-file
# "/home/martyn/.emacs.d/martyn/yasnippet-0.6.1c/dropdown-list.el" t)

# #+END_SRC

# #+results:
# : t

**** TODO Yasnippets config for org-mode compatability
     SCHEDULED: <2011-01-19 Wed>

# #+BEGIN_SRC emacs-lisp

#  (add-hook 'org-mode-hook
#            (lambda ()
#              (org-set-local 'yas/trigger-key [tab])
#              (define-key yas/keymap [tab] 'yas/next-field-group)))

# #+END_SRC

#+results:
     
** Redo+
This appears to be an upgrade of redo (although I never had any
problems with redo). I shall monitor this!

*** web
[[http://www.emacswiki.org/emacs/RedoPlus][
emacswiki]]
[[http://www.emacswiki.org/emacs/RedoMode][older-redo]]

*** configuration 

#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path (concat dotfiles-dir "martyn/redoplus"))
(require 'redo+)

#+END_SRC

#+results:
: redo+

**** Make C-z undo, and M-z redo

#+BEGIN_SRC emacs-lisp

(define-key global-map (kbd "M-z") 'redo)
(define-key global-map (kbd "C-z") 'undo)

#+END_SRC

#+results:
: undo

** DONE HideShow
   CLOSED: [2011-01-25 Tue 14:49]
*** Website 

[[http://www.emacswiki.org/emacs/HideShow][emacsWiki/hideshow]]

*** HideShow Configuration

#+BEGIN_SRC emacs-lisp

(add-hook 'c-mode-common-hook   'hs-minor-mode)
    (add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)
    (add-hook 'java-mode-hook       'hs-minor-mode)
    (add-hook 'lisp-mode-hook       'hs-minor-mode)
    (add-hook 'perl-mode-hook       'hs-minor-mode)
    (add-hook 'sh-mode-hook         'hs-minor-mode)

  (defun me-toggle-hiding-all()
  "Fast cycling of all folded all unfolded utilising 
   hideshow minor mode hs-minor-mode"
  (interactive)
  (defvar me-hideshow-active nil)
  (setq me-hideshow-active
    (if me-hideshow-active 
        (progn (hs-show-all) nil)
      (progn (hs-hide-all) t))))

  ; add hook for hideshow minor mode
  (add-hook 'lisp-mode-hook 'hs-minor-mode)
  (global-set-key [f3] 'hs-toggle-hiding)
  (global-set-key [C-f3] 'me-toggle-hiding-all)

#+END_SRC

#+results:
: me-toggle-hiding-all

*** TODO hideshow.org
**** Website

     [[https://github.com/secelis/hideshow-org][github/hideshow-org]]

**** Configuration

#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path (concat dotfiles-dir "martyn/hideshow-org"))
(require 'hideshow-org)

#+END_SRC

*** To byte-compile-file

# BEGIN_SRC emacs-lisp

# (byte-compile-file
# (concat dotfiles-dir "martyn/hideshow-org/hideshow-org.el") t)

# END_SRC

#+results:
: t

**** Update

#+BEGIN_SRC sh

# cd ~/.emacs.d/martyn/hideshow-org
# git pull origin master

#+END_SRC

#+results:
: Already up-to-date.

** DONE Lusty Explorer
   CLOSED: [2011-01-25 Tue 14:49]
*** emacswiki

[[http://www.emacswiki.org/emacs/lusty-explorer.el][emacswiki]]

*** Github

[[https://github.com/sjbach/lusty-emacs][lusty-emacs]]

*** Update

#+BEGIN_SRC sh

cd ~/.emacs.d/martyn/lusty-emacs
git pull origin master

#+END_SRC

#+results:
: Already up-to-date.

*** Config

#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path
             (concat dotfiles-dir  "martyn/lusty-emacs"))
(require 'lusty-explorer)
(define-key global-map (kbd "C-x C-d") 'lusty-file-explorer)

#+END_SRC

#+results:
: lusty-file-explorer

*** To byte-compile-file

NOTE: lusty-explorer.el doesn't want to compile

# #+BEGIN_SRC emacs-lisp

# (byte-compile-file
# "~/.emacs.d/martyn/lusty-emacs/lusty-explorer.el")
# (byte-compile-file
# "~/.emacs.d/martyn/lusty-emacs/lusty-ido.el")

# #+END_SRC

#+results:
: t

** TODO Highlight Parantheses
*** Site
[[(add-to-list%20'load-path%20"/path/to/highlight-parentheses")(require%20'highlight-parentheses)][site]]

*** Update

#+BEGIN_SRC sh

cd ~/.emacs.d/martyn/highlight-parentheses
git pull

#+END_SRC

#+results:

*** Setup

#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path (concat dotfiles-dir 
  "martyn/highlight-parentheses"))
(require 'highlight-parentheses)

#+END_SRC

#+results:
: highlight-parentheses

*** To byte-compile-file

# #+BEGIN_SRC emacs-lisp

# (byte-compile-file
# "~/.emacs.d/martyn/highlight-parentheses/highlight-parentheses.el"  t)

# #+END_SRC

#+results:
: t

** TODO S-C-d to backward-delete-char() - doesn't work!!

#+BEGIN_SRC emacs-lisp

  (global-set-key [C-S-d] 'backward-delete-char)

#+END_SRC

#+results:
: backward-delete-char

** DONE Map C-x C-o to other window (as C-x o)
   CLOSED: [2011-01-26 Wed 10:41]

#+BEGIN_SRC emacs-lisp

  (global-set-key [C-x-o] 'other-window)

#+END_SRC

#+results:
: other-window

** TODO Conqueror

#+BEGIN_SRC emacs-lisp

(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "conkeror")

#+END_SRC

#+results:
: conkeror

* My custom functions
** help-page
#+BEGIN_SRC emacs-lisp
  
  (defun help-page (page-name)
    (interactive "s Enter help-page: ")
    (let ((case-fold-search nil)
          (case-replace nil)
          (help-directory
           "~/Dropbox/OrgData/"))
      (if(equal page-name "")
        (progn 
        (find-file (concat help-directory "help.org"))
        (error "Opening help.org")))
      (if (not (string-match "-help$"
                             (file-name-sans-extension page-name)))
          (setq page-name (concat page-name "-help.org")))
      (if (not (file-exists-p  (concat help-directory page-name)))
          (progn
            (set-buffer "help.org")
            (end-of-buffer)
            (newline)
            (insert (concat "[[file:" page-name "::*"
                            (replace-regexp-in-string
                             "-" "%20"
                             (file-name-sans-extension page-name) t t nil nil)
                            "]["
                            (replace-regexp-in-string
                             "-" " "
                             (file-name-sans-extension
                              page-name) t t nil nil)
                            "]]"))
            (sort-lines nil (point-min) (point-max))
            (set-buffer (get-buffer-create page-name))
            (org-insert-heading)
            (insert (replace-regexp-in-string
                     "-" " "
                     (file-name-sans-extension page-name) t t nil nil))
            (newline)
            (write-file (concat help-directory page-name))))) 
    (switch-to-buffer page-name))
#+END_SRC

#+results:
: help-page

* Initial display
** Display home org and agenda
*** "martyn-laptop" system specific...

 - NOTE: Currently loads ALL org files - might consider just "tracked"
   org files
 - Switch to home.org
 - Bring up schedule agenda in other window

#+BEGIN_SRC emacs-lisp

(defun me-startup-in-agenda ()
  (if (string= system-name "martyn-laptop") 
      (progn
        (split-window-horizontally)
        (my-load-org-files)
        (switch-to-buffer "home.org")
        (org-agenda-list))))

(add-hook 'window-setup-hook 'me-startup-in-agenda)

#+END_SRC

#+results:

* Under Test

	
Re: emacs and gnome-terminal
(Anonymous)
2008-05-20 04:51 am UTC (link)
Not a bug fix, but this seems to make the problem go away.

Turn on column-number-mode.

You can put the following into your ~/.emacs to have it on on loading
 
 
 
 
#+BEGIN_SRC emacs-lisp

(setq-default column-number-mode t)

#+END_SRC

#+results:
: t



#+BEGIN_SRC emacs-lisp

(setq cursor-type 'hbar)
(set-cursor-color  "white")

#+END_SRC

#+results:

* Delete temp file martyn/init.el (do this last!)
   :PROPERTIES:
   :ID:       6a8cf784-ad8c-4b52-b549-bc2d3c662e85
   :END:

#+BEGIN_SRC emacs-lisp

(delete-file "~/.emacs.d/martyn/init.el")

#+END_SRC

#+results:



:PROPERTIES:

   ;;  s#+LATEX_HEADER: \lstset{
   ;;  #+LATEX_HEADER:         keywordstyle=\color{blue},
   ;;  #+LATEX_HEADER:         commentstyle=\color{red},
   ;;  #+LATEX_HEADER:         stringstyle=\color{green},
   ;;  #+LATEX_HEADER:         basicstyle=\ttfamily\small,
   ;;  #+LATEX_HEADER:         columns=fullflexible,
   ;;  #+LATEX_HEADER:         basewidth={0.5em,0.4em}
   ;;  #+LATEX_HEADER:         }
   ;;  #+LATEX_HEADER: \RequirePackage{fancyvrb}
   ;;  #+LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{fontsize=\small,formatcom = {\color[rgb]{0.5,0,0}}}
  ;; #+OPTIONS: H:3
  ;; #+LaTeX_CLASS: org-article
  #+LaTeX_CLASS_OPTIONS:[koma,letterpaper,captions=tableheading,utopia,11pt,listings-sv,microtype,paralist,colorlinks=true,urlcolor=blue,secnums]

:END:




#+BEGIN_SRC emacs-lisp

(setq org-export-directory "~/Dropbox/OrgData/html")

#+END_SRC

#+results:
: ~/Dropbox/OrgData/html







                 
                 
                 
                 
                 
                 
                 
                  
                  
                  
                  
                  
                   
                 
                 
                 
                 
                 
                 
                  
                  
                  
                  
                  
                  
                  
                  
                  
