#+SETUPFILE: ~/Dropbox/OrgData/home-setupfile.org
#+STARTUP: overview
#+LaTeX_CLASS_OPTIONS:[colorlinks=true,urlcolor=blue,listings-sv]
# #+TITLE: Emacs Initialisation File Setup

* My Emacs Configurations

** C-k to kill whole line
   :PROPERTIES:
   :ID:       df2f072d-30d1-40e9-9905-deb39a963b1d
   :END:

#+begin_src emacs-lisp :results silent -n

(setq kill-whole-line t)

#+end_src

** Mark (select) all on S-C-SPC
   :PROPERTIES:
   :ID:       bac7b873-a758-4991-afe7-abba7aada174
   :END:

#+begin_src emacs-lisp :results silent

(define-key global-map (kbd "S-C-SPC") 'mark-whole-buffer)

#+end_src

** Map M-l to goto-line
   :PROPERTIES:
   :ID:       d90de769-45ce-4e5a-a878-88d0e76e162a
   :END:

#+begin_src emacs-lisp :results silent

(global-unset-key "\M-l")
(global-set-key "\M-l" 'goto-line)

#+end_src

** Remap M-j, M-l to navigation
   :PROPERTIES:
   :ID:       ffa0b60c-9281-44ff-b939-c6c00dc7b728
   :END:

#+begin_src emacs-lisp :results silent

; (global-set-key "\M-i" 'previous-line)
(global-set-key "\M-j" 'backward-char)
; (global-set-key "\M-k" 'forward-line)
(global-set-key "\M-l" 'forward-char)

#+end_src
** don't kill my window setup

#+begin_src emacs-lisp :results silent

(setq org-agenda-window-setup 'current-window)

#+end_src

** Changes all yes/no questions to y/n type

#+begin_src emacs-lisp :results silent

(fset 'yes-or-no-p 'y-or-n-p)

#+end_src

** CScope

#+begin_src emacs-lisp :results silent

(add-to-list 'load-path
             (concat dotfiles-dir  "martyn/cscope"))
(require 'cscope)
 (setq cscope-do-not-update-database t)

#+end_src

** Confirm on exit

#+begin_src emacs-lisp :results silent

(setq confirm-kill-emacs 'y-or-n-p)

#+end_src

** Key mappings for F1 key
   - State "TODO"       from ""           [2011-03-15 Tue 15:03]

#+begin_src emacs-lisp :results silent

  (global-set-key [C-f1] 'help-for-help-internal)
  (global-set-key [S-C-f1] 'mj-cycle-helps)
  (global-set-key [f1] 'mj-cycle-helps)
  
#+end_src

** Emacs default command modifications

#+begin_src emacs-lisp :results silent

(put 'upcase-region 'disabled nil)

#+end_src

** Setup bbdb Contact Database
   :PROPERTIES:
   :ID:       8947b21f-9a13-4850-b1e6-01ac553d4c67
   :END:

#+begin_src emacs-lisp :results silent

(add-to-list 'load-path
             (concat dotfiles-dir  "martyn/bbdb-2.35/lisp"))
(require 'bbdb)
(bbdb-initialize)
(setq bbdb-north-american-phone-numbers-p nil
)

#+end_src

** Visual config
** Disable visible bell (for removing white square on OSX

Since I don't like either the beep or the flashing white square
(visible bell) the following is required to silence both (from [[http://stackoverflow.com/questions/324457/disable-carbon-emacs-scroll-beep][here]])

#+begin_src emacs-lisp :results silent

;; (setq visible-bell nil)
;; (setq ring-bell-function nil)

(defun my-bell-function ()
;; (unless (memq this-command
;;   	'(isearch-abort abort-recursive-edit exit-minibuffer
;;             keyboard-quit mwheel-scroll down up next-line previous-line
;;             backward-char forward-char next prior))
;;   (ding))
)
(setq ring-bell-function 'my-bell-function)

#+end_src

** Smooth Scrolling
*** web

[[http://adamspiers.org/computing/elisp/smooth-scrolling.el][link]]

*** initialisation

   :PROPERTIES:
   :ID:       42144f41-08ac-4f3d-825e-94d4a87a20c1
   :END:

#+begin_src emacs-lisp :results silent

(add-to-list 'load-path
             (concat dotfiles-dir "martyn/smooth-scrolling"))
(require 'smooth-scrolling)

#+end_src

*** adjust margin to 3 lines
#+begin_src emacs-lisp :results silent

(setq smooth-scroll-margin 3)

#+end_src

** Color theme initialisation
*** Configure color-theme 

#+begin_src emacs-lisp :results silent

(add-to-list 'load-path
             (concat dotfiles-dir "martyn/color-theme-6.6.0"))
(add-to-list 'load-path
             (concat dotfiles-dir "martyn/color-theme-6.6.0/themes"))
(require 'color-theme)
(eval-after-load "color-theme"
  '(progn
      (color-theme-initialize)))
;;     (color-theme-hober)))
;;     (color-theme-tangotango)))

#+end_src

*** web

github]]

*** configuration
*** Theme Faves  
**** configuration
    :PROPERTIES:
    :ID:       d8e20a1b-6727-4b41-894a-744c5a530072
    :END:

# #+begin_src emacs-lisp :results silent
# ;
# ; (add-to-list 'load-path
# ;              (concat dotfiles-dir "martyn/color-theme-tangotango"))
# ;(setq color-theme-load-all-themes nil)

# ;; select theme - first list element is for windowing system, second is for console/terminal
# ;; Source : http://www.emacswiki.org/emacs/ColorTheme#toc9
# ; (setq color-theme-choices 

# #+end_src

#+begin_src emacs-lisp :results silent
  
  (add-to-list 'load-path
               (concat dotfiles-dir "martyn/martyn/theme-faves"))
  (require 'theme-faves)
  (add-hook 'window-setup-hook 'theme-faves-init)
  
  (global-set-key [C-f7] 'theme-faves-audition-cycle-up)
  (global-set-key [S-C-f7] 'theme-faves-audition-cycle-down)
  (global-set-key [f7] 'theme-faves-cycle-up)
  (global-set-key [S-f7] 'theme-faves-cycle-down)
  
#+end_src

*** Maximise frame at startup (hook)
   :PROPERTIES:
   :ID:       5ec698bf-0dcd-4b19-b923-a5f90e5a1073
   :END:

#+begin_src emacs-lisp

;;(add-to-list 'load-path
;;             (concat dotfiles-dir "martyn/maxframe"))
;;  (require 'maxframe)
;;  (add-hook 'window-setup-hook 'maximize-frame t)
;;  (maximize-frame)

(defun toggle-fullscreen ()
  (interactive)
  (if (string= system-name "martyn-laptop")
    (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
  	    		 '(2 "_NET_WM_STATE_MAXIMIZED_VERT" 0))
    (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
  	    		 '(2 "_NET_WM_STATE_MAXIMIZED_HORZ" 0))
    (add-hook 'window-setup-hook 'toggle-fullscreen)))


#+end_src

** Inhibit scratch message

#+begin_src emacs-lisp :results silent

(setq initial-scratch-message nil)

#+end_src

** Remove Paredit default from emacs-lisp mode hook 
(turned on by emacs starter kit)

#+begin_src emacs-lisp :results silent

(remove-hook 'emacs-lisp-mode-hook 'turn-on-paredit nil)

#+end_src

| hs-minor-mode | ert--activate-font-lock-keywords | ac-emacs-lisp-mode-setup | run-coding-hook | esk-remove-elc-on-save | turn-on-eldoc-mode |
     
** Add .emacs.d/martyn/martyn to load-path

#+begin_src emacs-lisp :results silent

(add-to-list 'load-path
             (concat dotfiles-dir  "martyn/martyn"))

#+end_src

** my-load-init-files function

#+begin_src emacs-lisp :results silent

(require 'my-load-init-files)

#+end_src

** my-load-drill-files function

#+begin_src emacs-lisp :results silent

(require 'my-load-drill-files)

#+end_src

** my-load-org-files function

#+begin_src emacs-lisp :results silent

(require 'my-load-org-files)

#+end_src

** Emacs Customisation destination files

These are already defined in Starter Kit but are re-adjusted here to keep
under my revision control...

*** loaddefs

#+begin_src emacs-lisp :results silent

(setq autoload-file (concat dotfiles-dir "martyn/loaddefs.el"))

#+end_src

*** custom

Customisations made using emacs Customizations go here...

#+begin_src emacs-lisp :results silent

(setq custom-file (concat dotfiles-dir "martyn/custom.el"))

#+end_src

** Notification (todochiku / growl)
#+begin_src emacs-lisp :results silent

(when (string= "darwin" system-type)
 (add-to-list 'load-path
  (concat dotfiles-dir  "martyn/todochiku"))
 (require 'todochiku)
 (setq todochiku-icons-directory 
  (concat dotfiles-dir  "martyn/todochiku/todochiku-icons"))
 (defun mj-notify-pomodoro-done ()
  (todochiku-message "Pomodoro"
"
  This Pomodoro Session is Complete

        Release Concentration

           Take a Break

" (todochiku-icon 'bell)))
  (add-hook 'org-timer-done-hook  'mj-notify-pomodoro-done))

#+end_src

** Add org-mode contrib/lisp files to load path
   :PROPERTIES:
   :ID:       45537f41-3389-45b8-9454-bc0e2e51ebe5
   :END:

#+begin_src emacs-lisp :results silent

(add-to-list 'load-path "~/org-mode/contrib/lisp")

#+end_src

** org-mode directory
#+begin_src emacs-lisp :results silent

(setq org-directory "~/Dropbox/OrgData")

#+end_src

** Org Agenda
*** default to show current day

#+begin_src emacs-lisp :results silent

(setq org-agenda-ndays 1)

#+end_src

*** Org Agenda Files

#+begin_src emacs-lisp :results silent

 (setq org-agenda-files (quote (
    "~/Dropbox/OrgData/diary.org"
    "~/Dropbox/OrgData/inbox.org")))
 
#+end_src

** org-drill
   :PROPERTIES:
   :ID:       eb6dd9b1-86bd-4fb4-acb3-992ef90e29da
   :END:

#+begin_src emacs-lisp :results silent

(require 'org-drill)
(setq org-learn-always-reschedule t)
(setq org-drill-use-visible-cloze-face-p t)
(setq org-drill-add-random-noise-to-intervals-p t)
(put 'scroll-left 'disabled nil)

#+end_src

** \TODO keywords global setup
    :PROPERTIES:
    :ID:       c22f6325-70c9-42c3-8c30-221f115c864d
    :END:

[[file:~/Dropbox/OrgData/Images/TODO.png]]

#+begin_src emacs-lisp :results silent

(setq org-todo-keywords (quote ((sequence "TODO(t!)" "|" "DONE(d!/!)")
                                (sequence "WAITING(w@/!)"
                                "SOMEDAY(s!)" 
                                "IGNORED" 
                                "FAIL" 
                                "PASS"
                                "MISSING"
                                "DEPRECATED"
                                "|" "CANCELLED(c@/!)"))))

(setq org-todo-keyword-faces
      (quote (("TODO"      :foreground "red"          :weight bold)
              ("DONE"      :foreground "forest green" :weight bold)
              ("WAITING"   :foreground "yellow"       :weight bold)
              ("SOMEDAY"   :foreground "goldenrod"    :weight bold)
              ("CANCELLED" :foreground "orangered"    :weight bold)
              ("EXPIRED"   :foreground "olivedrab1"   :weight bold)
              ("IGNORED"   :foreground "yellow"       :weight bold)
              ("FAIL"      :foreground "red"          :weight bold)
              ("MISSING"   :foreground "olivedrab1"   :weight bold)
              ("PASS"      :foreground "forest green" :weight bold)
              ("DEPRECATED":foreground "orangered"    :weight bold))))

#+end_src

** Lilypond mode
 
#+begin_src emacs-lisp :results silent

 (add-to-list 'load-path
              (concat dotfiles-dir  "martyn/lilypond"))
(autoload 'LilyPond-mode "lilypond-mode" "LilyPond Editing Mode" t)
(add-to-list 'auto-mode-alist '("\\.ly$" . LilyPond-mode))
(add-to-list 'auto-mode-alist '("\\.ily$" . LilyPond-mode))

#+end_src
 
** Setup org-mode (development)

#+begin_src emacs-lisp :results silent

(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(global-font-lock-mode 1)                     ; for all buffers
(setq load-path (cons "~/org-mode" load-path))

#+end_src

** Configure Babel languages 
Configured for...
 - Ruby 
 - Python
 - C 
 - emacs-lisp
 - shell
 - graphviz
 - clojure
 - ditaa 
 - lilypond

   :PROPERTIES:
   :ID:       9983a066-2f94-4446-82e5-bea078211562
   :END:

#+begin_src emacs-lisp :results silent

(org-babel-do-load-languages
 'org-babel-load-languages
 '((ruby . t)
   (python . t)
   (C . t)
   (emacs-lisp . t)
   (sh t)
   (dot t)
   (clojure t)
   (ditaa t)
   (lilypond t)
   ))

(setq org-src-fontify-natively t) ;; color blocks

#+end_src

** org-confirm-babel-evaluate
#+begin_src emacs-lisp :results silent
(setq org-confirm-babel-evaluate nil)
#+end_src

** Display images in org mode

#+begin_src emacs-lisp :results silent

  ;; display images
  (local-set-key "\M-I" 'org-toggle-iimage-in-org)

;; -- Display images in org mode
;; enable image mode first
(iimage-mode)
;; add the org file link format to the iimage mode regex
(add-to-list 'iimage-mode-image-regex-alist
  (cons (concat "\\[\\[file:\\(~?" iimage-mode-image-filename-regex "\\)\\]")  1))
;;  add a hook so we can display images on load
(add-hook 'org-mode-hook '(lambda () (org-turn-on-iimage-in-org)))
;; function to setup images for display on load
(defun org-turn-on-iimage-in-org ()
  "display images in your org file"
  (interactive)
  (turn-on-iimage-mode)
  (set-face-underline-p 'org-link nil))
;; function to toggle images in a org bugger
(defun org-toggle-iimage-in-org ()
  "display images in your org file"
  (interactive)
  (if (face-underline-p 'org-link)
      (set-face-underline-p 'org-link nil)
      (set-face-underline-p 'org-link t))
  (call-interactively 'iimage-mode))

#+end_src

** Org Attach Directory

#+begin_src emacs-lisp :results silent
(setq org-attach-directory "~/Dropbox/OrgData/attach-directory")
#+end_src

** Don't insert blank lines on org heading generation

#+begin_src emacs-lisp :results silent

(setq org-blank-before-new-entry nil)

#+end_src

** Auto-Complete
*** To load

M-x load-file RET 
file to load: ~/.emacs.d/martyn/auto-complete/etc/install.el
destination: ~/.emacs.d/martyn/auto-complete/installation

*** Add to init

#+begin_src emacs-lisp :results silent

(add-to-list 'load-path "~/.emacs.d/martyn/auto-complete/installation")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/martyn/auto-complete/installation/ac-dict")
(ac-config-default)

#+end_src

*** Screencast 

[[http://www.youtube.com/watch?v%3DrGVVnDxwJYE][YouTube]]

** Redo+
This appears to be an upgrade of redo (although I never had any
problems with redo). I shall monitor this!

*** web
[[http://www.emacswiki.org/emacs/RedoPlus][
emacswiki]]
[[http://www.emacswiki.org/emacs/RedoMode][older-redo]]

*** configuration 

#+begin_src emacs-lisp :results silent

(add-to-list 'load-path (concat dotfiles-dir "martyn/redoplus"))
(require 'redo+)

#+end_src
    
    
**** Make C-z undo, and M-z redo

#+begin_src emacs-lisp :results silent

(define-key global-map (kbd "M-z") 'redo)
(define-key global-map (kbd "C-z") 'undo)

#+end_src

** Yasnippet

#+begin_src emacs-lisp :results silent
  
  (add-to-list 'load-path
               (concat dotfiles-dir  "martyn/yasnippet-read-only"))
  (require 'yasnippet) ;; not yasnippet-bundle
  (yas/initialize)
  
  (setq yas/root-directory 
        '(
       ;; "~/.emacs.d/martyn/martyn/unity-mode/snippets"
          "~/.emacs.d/martyn/martyn/snippets"
          "~/.emacs.d/martyn/martyn/snippets/yasnippet-org-mode-fork/snippets"
       ;; "~/.emacs.d/martyn/yasnippets-rails/rails-snippets"
          "~/.emacs.d/martyn/yasnippet-read-only/snippets"))

  ;; Load the snippets (NOTE: the mapc required for multiple directories)
  ;; (Map `yas/load-directory' to every element)
  
  (mapc 'yas/load-directory yas/root-directory)
  
#+end_src

** HideShow
   CLOSED: [2011-01-25 Tue 14:49]
*** Website 

[[http://www.emacswiki.org/emacs/HideShow][emacsWiki/hideshow]]

*** HideShow Configuration

#+begin_src emacs-lisp :results silent

(add-hook 'c-mode-common-hook   'hs-minor-mode)
    (add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)
    (add-hook 'java-mode-hook       'hs-minor-mode)
    (add-hook 'lisp-mode-hook       'hs-minor-mode)
    (add-hook 'perl-mode-hook       'hs-minor-mode)
    (add-hook 'sh-mode-hook         'hs-minor-mode)

  (defun me-toggle-hiding-all()
  "Fast cycling of all folded all unfolded utilising 
   hideshow minor mode hs-minor-mode"
  (interactive)
  (defvar me-hideshow-active nil)
  (setq me-hideshow-active
    (if me-hideshow-active 
        (progn (hs-show-all) nil)
      (progn (hs-hide-all) t))))

  ; add hook for hideshow minor mode
  (add-hook 'lisp-mode-hook 'hs-minor-mode)
  (global-set-key [f3] 'hs-toggle-hiding)
  (global-set-key [C-f3] 'me-toggle-hiding-all)

#+end_src

*** hideshow.org
**** Website

     [[https://github.com/secelis/hideshow-org][github/hideshow-org]]

**** Configuration

#+begin_src emacs-lisp :results silent

(add-to-list 'load-path (concat dotfiles-dir "martyn/hideshow-org"))
(require 'hideshow-org)

#+end_src

*** To byte-compile-file

# BEGIN_SRC emacs-lisp

# (byte-compile-file
# (concat dotfiles-dir "martyn/hideshow-org/hideshow-org.el") t)

# END_SRC

** Lusty Explorer
   CLOSED: [2011-01-25 Tue 14:49]
*** emacswiki

[[http://www.emacswiki.org/emacs/lusty-explorer.el][emacswiki]]

*** Github

[[https://github.com/sjbach/lusty-emacs][lusty-emacs]]

*** Config

#+begin_src emacs-lisp :results silent

(add-to-list 'load-path
             (concat dotfiles-dir  "martyn/lusty-emacs"))
(require 'lusty-explorer)
(define-key global-map (kbd "C-x C-d") 'lusty-file-explorer)

#+end_src

*** To byte-compile-file

NOTE: lusty-explorer.el doesn't want to compile

# #+begin_src emacs-lisp :results silent

# (byte-compile-file
# "~/.emacs.d/martyn/lusty-emacs/lusty-explorer.el")
# (byte-compile-file
# "~/.emacs.d/martyn/lusty-emacs/lusty-ido.el")

# #+end_src

** Map C-x C-o to other window (as C-x o)
   CLOSED: [2011-01-26 Wed 10:41]

#+begin_src emacs-lisp :results silent

  (global-set-key [C-x-o] 'other-window)

#+end_src

** Setup generic browser

#+begin_src emacs-lisp :results silent

  (if (string= "darwin" system-type)
      (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "open")
    (setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "conkeror"))

#+end_src

** Setup MacGPG2 (for gpg) on mac OSX

#+begin_src emacs-lisp :results silent

  (when (string= "darwin" system-type)
    (setq epg-gpg-program "/usr/local/MacGPG2/bin/gpg2")
    (message "MacGPG2 set up"))

#+end_src

** Make Password

#+begin_src emacs-lisp :results silent
  
  (add-to-list 'load-path
               (concat dotfiles-dir  "martyn/make-password"))
  
  (require 'make-password)
  (defalias 'mj-generate-password 'make-password)
  (defalias 'generate-password 'make-password)
  
#+end_src

** mj-versions

#+begin_src emacs-lisp :results silent

(add-to-list 'load-path
             (concat dotfiles-dir  "martyn/martyn/mj-versions"))
(require 'mj-versions)

#+end_src

** my-org-test-setup

#+begin_src emacs-lisp :results silent

(add-to-list 'load-path
             (concat dotfiles-dir  "martyn/martyn/my-org-test-setup"))
(require 'my-org-test-setup)

#+end_src

** my-header-arguments

#+begin_src emacs-lisp :results silent

(add-to-list 'load-path
             (concat dotfiles-dir  "martyn/martyn/my-header-arguments"))
(require 'my-header-arguments)

#+end_src

** help-page

#+begin_src emacs-lisp :results silent

(add-to-list 'load-path
             (concat dotfiles-dir  "martyn/martyn/help-page"))
(require 'help-page)

  (defalias 'hp 'help-page)
  
#+end_src

** Setup IRC user info and channels

#+begin_src emacs-lisp :results silent

(setq erc-header-line-format nil)
(setq erc-hide-list '("JOIN" "PART" "QUIT"))

(setq erc-log-channels-directory t)
(setq erc-log-file-name-function "~/erc")
(setq erc-truncate-buffer-on-save t)
(setq erc-nick "mjgo")
#+end_src

** Boxquote
#+begin_src emacs-lisp :results silent
(add-to-list 'load-path
 (concat dotfiles-dir "martyn/boxquote"))
(require 'boxquote)
#+end_src

** lorem-ipsum 
#+begin_src emacs-lisp :results silent
(add-to-list 'load-path
 (concat dotfiles-dir "martyn/lorem-ipsum"))
(require 'lorem-ipsum)
#+end_src

** magit-hide-diffs
#+begin_src emacs-lisp :results silent

(setq magit-hide-diffs t)

#+end_src

** continuous-testing

#+begin_src emacs-lisp :results silent
(add-to-list 'load-path
 (concat dotfiles-dir "martyn/martyn/continuous-testing"))
(require 'continuous-testing)
#+end_src

** ispell

#+begin_src emacs-lisp :results silent
(setq ispell-program-name "/opt/local/bin/ispell")
(require 'ispell) 
 
#+end_src
** ess
#+begin_src emacs-lisp :results silent

  (add-to-list
   'load-path
    (concat dotfiles-dir "martyn/ess-5.14/lisp/"))
  (require 'ess-site)

#+end_src

* Under Test
** TODO disable org-use-speed-commands (default)

#+begin_src emacs-lisp :results silent
(setq org-use-speed-commands nil)
#+end_src

** TODO Make windmove work in org-mode

#+begin_src emacs-lisp :results silent

(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)

#+end_src

; Targets complete in steps so we start with filename, TAB shows the next level of targets etc
(setq org-outline-path-complete-in-steps t)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))

; Use IDO only for buffers
; set ido-mode to buffer and ido-everywhere to t via the customize interface
; '(ido-mode (quote both) nil (ido))
; '(ido-everywhere t)

#+end_src

** TODO Fix tab in org mode

Not sure this is of any benefit anymore!    

#+begin_src emacs-lisp :results silent

   ;; fix tab
   (local-set-key "\C-y" 'yank)

#+end_src

** TODO One-touch timestamps

#+begin_src emacs-lisp :results silent
(setq org-agenda-skip-additional-timestamps nil)
(defun mj-one-touch-timestamp ()
  (interactive)
  (when (eq major-mode 'org-mode)
    (org-insert-time-stamp nil t t)))
(define-key global-map (kbd "<f8>") 'mj-one-touch-timestamp)
#+end_src

** TODO Fast TODO key selection

#+begin_src emacs-lisp :results silent

(setq org-treat-S-cursor-todo-selection-as-state-change nil)

#+end_src

** TODO Configure org-mobile

#+begin_src emacs-lisp :results silent
 (setq org-mobile-directory "~/Dropbox/MobileOrg")
 (setq org-mobile-files org-agenda-files)
 (setq org-mobile-inbox-for-pull "~/Dropbox/OrgData/inbox.org")
#+end_src

** TODO my-run-drills function (doesn't work yet)

#+begin_src emacs-lisp :results silent

 (defun my-run-drills ()
 "Function to run all drills that exist in agenda files"
  (interactive)
  (org-drill 'agenda))

 (provide 'my-run-drills)

#+end_src

** TODO Setup org-capture
    :PROPERTIES:
    :ID:       3f712c43-2db3-4001-93df-ffed1319e19a
    :END:

*** Setup capture location and key


#+begin_src emacs-lisp :results silent

(setq org-default-notes-file "~/Dropbox/OrgData/capture.org")
(define-key global-map "\C-cc" 'org-capture)

(setq org-capture-templates
      '(("t" "Agenda Todo" entry
         (file+datetree+prompt "~/Dropbox/OrgData/diary.org")
;;	 "\n\n** TODO %?\n%T\n\n%i\n%a\n\n\n"
	 "\n\n** TODO %?\n%t\n\n"
	 :empty-lines 1)))

;;	("n" "Agenda Notes" entry
;;	 (file+headline "~/Dropbox/OrgData/diary.org" "Agenda")
;;	 "\n\n** %?\n%T\n%i\n%a\n\n\n"
;;	 :empty-lines 1))

#+end_src

*** TODO Setup capture templates

*** TODO Setup refile targets

#+begin_src emacs-lisp :results silent

; Use IDO for target completion
(setq org-completion-use-ido t)

; Targets include this file and any file contributing to the agenda - up to 5 levels deep
(setq org-refile-targets (quote ((org-agenda-files :maxlevel . 5) (nil :maxlevel . 5))))

; Targets start with the file name - allows creating level 1 tasks
;; TESTING (setq org-refile-use-outline-path (quote file))

#+end_src

** TODO Org Agenda Custom Commands

#+begin_src emacs-lisp :results silent

(defun run-todo-unscheduled ()
"agenda of unscheduled todos"
(interactive)
(setq org-agenda-todo-ignore-scheduled t)
(org-todo-list '("t"))
(setq org-agenda-todo-ignore-scheduled nil))

(provide 'run-todo-unscheduled)

 (setq org-agenda-custom-commands
           '(("e" todo "-SCHEDULED")
             ("W" todo-tree "WAITING")
             ("u" tags "+boss-urgent")
             ("v" tags-todo "+boss-urgent")
             ("U" tags-tree "+boss-urgent")
             ("f" occur-tree "\\<FIXME\\>")
             ("hl" tags "+home+Lisa")
             ("hp" tags "+home+Peter")
             ("hk" tags "+home+Kim")))

#+end_src

#+begin_src emacs-lisp :results silent
(setq org-agenda-custom-commands
      (quote (("w" "Tasks waiting on something" tags "WAITING/!"
               ((org-use-tag-inheritance nil)
                (org-agenda-todo-ignore-scheduled nil)
                (org-agenda-todo-ignore-deadlines nil)
                (org-agenda-todo-ignore-with-date nil)
                (org-agenda-overriding-header "Waiting Tasks")))
              ("r" "Refile New Notes and Tasks" tags "LEVEL=1+REFILE"
               ((org-agenda-todo-ignore-with-date nil)
                (org-agenda-todo-ignore-deadlines nil)
                (org-agenda-todo-ignore-scheduled nil)
                (org-agenda-overriding-header "Tasks to Refile")))
              ("N" "Notes" tags "NOTE"
               ((org-agenda-overriding-header "Notes")))
              ("p" "Projects" tags-todo "LEVEL=2-REFILE|LEVEL=1+REFILE/!-DONE-CANCELLED"
               ((org-agenda-skip-function 'bh/skip-non-projects)
                (org-agenda-overriding-header "Projects")))
              ("o" "Other (Non-Project) tasks" tags-todo "LEVEL=2-REFILE|LEVEL=1+REFILE/!-DONE-CANCELLED"
               ((org-agenda-skip-function 'bh/skip-projects)
                (org-agenda-overriding-header "Other Non-Project Tasks")))
              ("A" "Tasks to be Archived" tags "LEVEL=2-REFILE/DONE|CANCELLED"
               ((org-agenda-overriding-header "Tasks to Archive")))
              ("h" "Habits" tags "STYLE=\"habit\""
               ((org-agenda-todo-ignore-with-date nil)
                (org-agenda-todo-ignore-scheduled nil)
                (org-agenda-todo-ignore-deadlines nil)
                (org-agenda-overriding-header "Habits")))
              ("#" "Stuck Projects" tags-todo "LEVEL=2-REFILE|LEVEL=1+REFILE/!-DONE-CANCELLED"
               ((org-agenda-skip-function 'bh/skip-non-stuck-projects)
                (org-agenda-overriding-header "Stuck Projects")))
              ("c" "Select default clocking task" tags "LEVEL=2-REFILE"
               ((org-agenda-skip-function
                 '(org-agenda-skip-subtree-if 'notregexp "^\\*\\* Organization"))
                (org-agenda-overriding-header "Set default clocking task with C-u C-u I"))))))

#+end_src

** TODO Unity Mode
*** load path and speed keys

#+begin_src emacs-lisp :results silent

 (add-to-list 
  'load-path
   (concat dotfiles-dir "martyn/martyn/unity-mode"))
 (require 'unity-mode)
 ;(add-hook 'c-mode-hook 'unity-mode)

(global-set-key [f5] 'unity-find-and-open-a-primative-match-forward)
(global-set-key [S-f5] 'unity-find-and-open-a-primative-match-reverse)
(global-set-key [C-f5] 'unity-cycle-MCH-buffer)
(global-set-key [f6] 'unity-cycle-alpha-ascending)
(global-set-key [S-f6] 'unity-cycle-alpha-descending)

#+end_src

** TODO unity-project ()

#+begin_src emacs-lisp :results silent
  
  (defun unity-project ()
    (interactive)
    (find-file "~/.emacs.d/martyn/martyn/unity-mode/unity-parse-project-file.el")
    (find-file "~/.emacs.d/martyn/martyn/unity-mode/unity-auto-config.el")
    (delete-other-windows)
    (split-window-horizontally)
    (windmove-right)
    (find-file "~/.emacs.d/martyn/martyn/unity-mode/unity-mode.el")
    (windmove-left)
;;    (find-file "~/.emacs.d/martyn/martyn/unity-mode/unity-mode-tests.el")
    (switch-to-buffer "#emacs")
    (split-window-vertically)
    (switch-to-buffer "*ert*")
    (windmove-down)
    (switch-to-buffer "#emacs"))
 
#+end_src

** TODO unity-eval-src-and-tests ()

#+begin_src emacs-lisp :results silent
  
  (defun unity-eval-src-and-tests ()
    (interactive)
    (let ((original-buffer buffer-file-name)
          (original-window (selected-window)))
  
      (if(string-match "^unity-" (file-name-nondirectory original-buffer)) 
          (progn
            (eval-buffer "unity-mode-tests.el")
            (eval-buffer "unity-mode.el")
            (ert t)))
      (select-window original-window))) 
  ;; (error "%s" (windmove-find-other-window 'right))
  ;;     (if(equal original-buffer (windmove-find-other-window 'right))
  ;;         (windmove-right)
  ;;       (windmove-down))))
  
#+end_src

** TODO unity-project-org()
Moved to unity-mode.el

#+begin_src emacs-lisp :results silent
  
;   (global-set-key [f4] 'unity-eval-src-and-tests)
;   (global-set-key [C-f4] 'unity-switch-src-control-file)
;   (global-set-key [C-c C-v] 'eval-region)
  
#+end_src

** TODO Develop group agenda to show unscheduled TODO items

[[http://osdir.com/ml/emacs-orgmode-gnu/2010-03/msg00736.html][Suggestions]]
** TODO Setup for latex / pdf export of org-mode

  1) NOTE: remember ubuntu requires texlive-latex-extra for this
  2) NOTE: also required ttf-marvosym
  3) For missing packages try searching [[http://packages.ubuntu.com/search?keywords%3Dmarvosym&searchon%3Dnames&suite%3Dmaverick&section%3Dall][here]] and apt-get install package
  4) Useful latex [[http://had.fmf.uni-lj.si/~horvat/publishing/latex/general/latex2pdf.pdf][prettifying link]]

#+begin_src emacs-lisp :results silent

;; remember ubuntu requires texlive-latex-extra for this

(require 'org-latex)
(setq org-export-latex-listings t)
(add-to-list 'org-export-latex-packages-alist '("" "listings"))
(add-to-list 'org-export-latex-packages-alist '("" "color"))

#+end_src

** TODO Setup for Auctex (ongoing)

  ;;  Setup gleaned from [[http://salomie.ro/tudor/2010/09/02/console-based-system/][here]]
  ;;  #+begin_src emacs-lisp :results silent
  ;;  
  ;;  ;; AUCTeX
  ;;  (setq TeX-auto-save t)
  ;;  (setq TeX-parse-self t)
  ;;  ;set up AUCTeX to deal with multiple file documents.
  ;;  (setq-default TeX-master nil)
  ;;  ;turn on pdf-mode.  AUCTeX will call pdflatex to compile instead of latex.
  ;;  (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
  ;;  ;turn on flyspell mode - this will automatically spell check the document in LaTex-mode
  ;;  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  ;;  
  ;;      ; allow for export=>beamer by placing
  ;;      ;; #+LaTeX_CLASS: beamer in org files
  ;;      (unless (boundp 'org-export-latex-classes)
  ;;      (setq org-export-latex-classes nil))
  ;;      (add-to-list 'org-export-latex-classes
  ;;      ;; beamer class, for presentations
  ;;      '("beamer"
  ;;        "\\documentclass[11pt]{beamer}\n
  ;;        \\mode<{{{beamermode}}}>\n
  ;;        \\usetheme{{{{beamertheme}}}}\n
  ;;        \\usecolortheme{{{{beamercolortheme}}}}\n
  ;;        \\beamertemplateballitem\n
  ;;        \\setbeameroption{show notes}
  ;;        \\usepackage[utf8]{inputenc}\n
  ;;        \\usepackage[T1]{fontenc}\n
  ;;        \\usepackage{hyperref}\n
  ;;        \\usepackage{color}
  ;;        \\usepackage{listings}
  ;;        \\lstset{numbers=none,language=[ISO]C++,tabsize=4,
  ;;        frame=single,
  ;;        basicstyle=\\small,
  ;;        showspaces=false,showstringspaces=false,
  ;;        showtabs=false,
  ;;        keywordstyle=\\color{blue}\\bfseries,
  ;;        commentstyle=\\color{red},
  ;;        }\n
  ;;        \\usepackage{verbatim}\n
  ;;        \\institute{{{{beamerinstitute}}}}\n
  ;;        \\subject{{{{beamersubject}}}}\n"
  ;;        org-beamer-sectioning
  ;;        ("\\section{%s}" . "\\section*{%s}")
  ;;        ("\\begin{frame}[fragile]\\frametitle{%s}"
  ;;        "\\end{frame}"
  ;;        "\\begin{frame}[fragile]\\frametitle{%s}"
  ;;        "\\end{frame}")
  ;;      ))
  ;;  
  ;;      ;; Set up skeletons (see below) in a menu in ORG MODE mode
  ;;      (defvar org-org-menu)
  ;;      (add-hook 'org-mode-hook
  ;;      (lambda () (easy-menu-add-item org-org-menu nil ["Skeletons" nil t])
  ;;      (easy-menu-add-item org-org-menu '("Skeletons") ["Beamer Theme" orgmode-beamer-my-skeleton t])))
  ;;      (define-skeleton orgmode-beamer-my-skeleton
  ;;        "inserts a simple orgmode-beamer template skeleton - use C-c C-e d to build the pdf"
  ;;        nil
  ;;        "#+LaTeX_CLASS: beamer\n"
  ;;        "#+MACRO: BEAMERMODE presentation\n"
  ;;        "#+MACRO: BEAMERCOLORTHEME dove\n"
  ;;        "#+MACRO: BEAMERSUBJECT RMRF\n"
  ;;        "#+BEAMER_FRAME_LEVEL: 2\n"
  ;;        "#+COLUMNS: %35ITEM %10BEAMER_env(Env) %10BEAMER_envargs(Env Args) %4BEAMER_col(Col) %8BEAMER_extra(Extra)\n"
  ;;        "#+OPTIONS: tags:nil\n"
  ;;        "#+MACRO: BEAMERINSTITUTE My Affiliation\n"
  ;;        "#+AUTHOR: Tudor-Ioan Salomie\n"
  ;;        "\n"
  ;;        "#+TITLE: Presentation title\n"
  ;;        "\n"
  ;;        "\n"
  ;;        "* My Section\n"
  ;;        "\n"
  ;;        "** Frame 1 \\\\ with a subtitle\n"
  ;;        "\n"
  ;;        "*** Idea\n"
  ;;        "\n"
  ;;        "#+begin_LaTeX\n"
  ;;        "\n"
  ;;        "#+end_LaTeX\n"
  ;;        "\n\n\n"
  ;;      )
  ;;  
  ;;  
  ;;  #+end_src
  ;;  
  ;;  #+results:
  ;;  : orgmode-beamer-my-skeleton
  ;;  

** TODO Setup Clocking work time

#+begin_src emacs-lisp :results silent

(setq org-clock-persist 'history)
     (org-clock-persistence-insinuate)

#+end_src

** TODO Function mj-diary-org opens diary.org

#+begin_src emacs-lisp :results silent
  
  (defun mj-diary-org()
    "Fast route to diary.org"
    (interactive)
    (find-file "~/Dropbox/OrgData/diary.org"))
  
#+end_src emacs-lisp

: mj-diary-org

#+begin_src emacs-lisp :results silent

  (defun mj-init-org()
    "Fast route to init.org"
    (interactive)
    (find-file "~/.emacs.d/martyn/init.org"))

#+end_src

#+begin_src emacs-lisp :results silent

  (defun mj-org-agenda ()
    (interactive)
    (org-agenda nil "a"))

#+end_src

** TODO Function mj-cycle-helps opens mj-helps

#+begin_src emacs-lisp :results silent
    
  (defun mj-cycle-helps()
    (interactive)
    (unless (boundp 'mj-current-help)
      (setq mj-current-help nil))
  (cond 
        ((equal (buffer-name) "diary.org")
         (bury-buffer "diary.org")
         (setq mj-current-help 'mj-org-agenda))
        ((equal (buffer-name) "*Org Agenda*")
         (org-agenda-quit)
         (setq mj-current-help 'help-page))
        ((equal (buffer-name) "help.org")
         (bury-buffer "help.org")
         (setq mj-current-help 'mj-init-org))
        (t (setq mj-current-help 'mj-diary-org)))
  (funcall mj-current-help))
    
#+end_src emacs-lisp

** TODO Flyspell mode error avoidance
*** web discussion

[[http://stackoverflow.com/questions/1781762/enabling-flyspell-mode-gives-an-error][stackoverflow]]
[[https://bugs.launchpad.net/ubuntu/%2Bsource/dictionaries-common/%2Bbug/619015][launchpad]]

*** configuration

# #+begin_src emacs-lisp :results silent
;; (require 'ispell)
;; (setq-default ispell-program-name "/usr/local/lib/aspell-0.60.6/aspell")
;; (setq ispell-really-aspell t)
;; (setq ispell-dictionary "/usr/local/lib/aspell6-en-7.1-0/english")
;; ;;# sudo rm /usr/share/emacs/site-lisp/dictionaries-common/debian-ispell.el
;;# sudo rm /usr/share/emacs/site-lisp/dictionaries-common/flyspell.el
;;# sudo rm /usr/share/emacs/site-lisp/dictionaries-common/ispell.el
;;# cd /usr/share/emacs23/site-lisp/dictionaries-common
;;# sudo rm *.el *.elc
;; the above didn't work for me so...

(unload-feature 'flyspell-mode)
;;neither did this! (not loaded)

 ##+end_src
** DEPRECATED ERT setup

# #+begin_src emacs-lisp :results silent
# 
# (add-to-list 'load-path "~/.emacs.d/martyn/ert")
# (require 'ert)
# 
# #+end_src
** TODO Graphviz-dot-mode

#+begin_src emacs-lisp :results silent

 (load-file  (concat dotfiles-dir  "martyn/graphviz-dot-mode/graphviz-dot-mode.el"))

#+end_src

** TODO Graphviz in babel doesn't appear to be implemented
** TODO org-contacts

#+begin_src emacs-lisp :results silent

(require 'org-contacts)

 (custom-set-variables
 '(org-contacts-files '("~/Dropbox/OrgData/contacts.org")))

;; ("c" "Contacts" entry (file "~/Org/contacts.org")
;;  "* %(org-contacts-template-name)
;; :PROPERTIES:
;; :EMAIL: %(org-contacts-template-email)
;; :END:")

#+end_src

*** TODO Yasnippet for rails

#+begin_src emacs-lisp :results silent

;; (add-to-list 'load-path
;;    (concat dotfiles-dir "/martyn/yasnippets-rails"))

;; (add-hook 'ruby-mode-hook ; or rails-minor-mode-hook ?
;;           '(lambda ()
;;              (make-variable-buffer-local 'yas/trigger-key)
;;              (setq yas/trigger-key [tab])))

;; (require 'yasnippet)
;; ;;(add-to-list 'yas/extra-mode-hooks
;; ;;             'ruby-mode-hook)

;; (yas/initialize)
;; (setq yas/window-system-popup-function 'yas/x-popup-menu-for-template)

;; ;;(yas/load-directory
;; ;;   (concat
;; ;;      dotfiles-dir "/martyn/snippets/yasnippets-rails/rails-snippets/"))
;; ;;(make-variable-buffer-local 'yas/trigger-key)

;; ;; yasnippet-org-mode
;; (yas/load-directory
;;    (concat
;;       dotfiles-dir "/martyn/snippets/yasnippet-org-mode/"))

   ;; yasnippet (allow yasnippet to do it's thing in org files)
;;   (make-variable-buffer-local 'yas/trigger-key)
;;   (setq yas/trigger-key [tab])
;;   (define-key yas/keymap [tab] 'yas/next-field-group)))

#+end_src

** TODO Highlight Parantheses
*** Site
[[(add-to-list%20'load-path%20"/path/to/highlight-parentheses")(require%20'highlight-parentheses)][site]]

*** Setup

#+begin_src emacs-lisp :results silent

(add-to-list 'load-path (concat dotfiles-dir 
  "martyn/highlight-parentheses"))
(require 'highlight-parentheses)

#+end_src

** TODO S-C-d to backward-delete-char() - doesn't work!!

#+begin_src emacs-lisp :results silent

  (global-set-key [C-S-d] 'backward-delete-char)

#+end_src
** TODO backward-kill-line (SHIFT CTRL K)

#+begin_src emacs-lisp :results silent

  (defun mj-backward-kill-line ()
    (interactive)
    (if (bolp) 
        (progn (previous-line)
               (org-kill-line))
      (let ((here (point)))
        (beginning-of-line)
        (kill-region (point) here))))
      
  (global-set-key (kbd "C-M-k") 'mj-backward-kill-line)

#+end_src

** TODO doremi-frm

** TODO Comment or uncomment region with M-k
   :PROPERTIES:
   :ID:       54fe0628-6b92-4e51-b03b-c1610506f021
   :END:

#+begin_src emacs-lisp :results silent

(global-set-key "\M-k" 'comment-or-uncomment-region)

#+end_src

** TODO column-number-mode

Re: emacs and gnome-terminal
(Anonymous)
2008-05-20 04:51 am UTC (link)
Not a bug fix, but this seems to make the problem go away.

Turn on column-number-mode.

You can put the following into your ~/.emacs to have it on on loading
 
#+begin_src emacs-lisp :results silent

(setq-default column-number-mode t)

#+end_src

#+begin_src emacs-lisp :results silent

(setq cursor-type 'hbar)
(set-cursor-color  "white")

#+end_src

** TODO Remap C-j to my custom goto-next-line function
   :PROPERTIES:
   :ID:       3f3b1218-c9dd-4dba-a2ee-f8aafa338992
   :END:

#+begin_src emacs-lisp :results silent

;; function here

#+end_src

** TODO elpa

;;#+begin_src emacs-lisp :results silent
;;(setq package-user-dir (concat dotfiles-dir "martyn/elpa"))
;;#+end_src

** TODO Mode-compile 

Setup Mode-compile (emacs-wiki)

#+begin_src emacs-lisp :results silent
  
  ;;mode-compile
  (autoload 'mode-compile "mode-compile"
    "Command to compile current buffer file based on the major mode" t)
;;  (global-set-key "\C-cc" 'mode-compile)
  (autoload 'mode-compile-kill "mode-compile"
    "Command to kill a compilation launched by `mode-compile'" t)
;;  (global-set-key "\C-ck" 'mode-compile-kill)
  
#+end_src

** TODO Ruby
*** TODO (needs sorting) need to run rvm-autodetect-ruby to get ruby to work in babel :DISABLED:
   :PROPERTIES:
   :ID:       86bebb8b-e52d-43da-9f7b-a49ef5db14ba
   :END:

#+begin_src emacs-lisp :results silent

 (add-to-list 'load-path (concat dotfiles-dir "martyn/rvm/rvm.el/"))
 (require 'rvm)
 (rvm-activate-corresponding-ruby)
 (rvm-autodetect-ruby)
 (rvm-use "1.9.2" "default")

#+end_src

*** Setup rspec-mode (development)
   :PROPERTIES:
   :ID:       ace283a7-2eb8-4c48-b667-8ebfb419606d
   :END:

#+begin_src emacs-lisp :results silent

(add-to-list 'load-path (concat dotfiles-dir "martyn/rspec-mode"))

#+end_src

** TODO Kill to start of line

#+begin_src emacs-lisp

(defun mj-kill-to-start-of-line ()
"kill from point to start of line"
(interactive)
(kill-line 0)
)
(global-set-key [C-j]  'mj-kill-to-start-of-line)

#+end_src

#+results:
: mj-kill-to-start-of-line

* Initial display
** Display diary org and agenda
*** "martyn-laptop" system specific...

 - NOTE: Currently loads ALL org files - might consider just "tracked" 
   org files
 - Switch to diary.org
 - Bring up schedule agenda in other window

#+begin_src emacs-lisp :results silent

(defun me-startup-in-agenda ()
  (if (string= system-name "martyn-laptop") 
      (progn
        (split-window-horizontally)
        (my-load-org-files)
        (switch-to-buffer "diary.org")
        (org-agenda-list))))

(add-hook 'window-setup-hook 'me-startup-in-agenda)

#+end_src

* Delete temp file martyn/init.el 
   :PROPERTIES:
   :ID:       6a8cf784-ad8c-4b52-b549-bc2d3c662e85
   :END:

#+begin_src emacs-lisp :results silent

(delete-file "~/.emacs.d/martyn/init.el")

#+end_src

#+begin_src emacs-lisp :results silent

(setq org-export-directory "~/Dropbox/OrgData/html")

#+end_src

